{"version":3,"file":"Accordion.jsx","sourceRoot":"","sources":["Accordion.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAW,QAAQ,EAAE,MAAM,OAAO,CAAA;AAChD,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,qBAAqB,CAAC;AAC7B,OAAO,iBAAiB,CAAC;AAazB,MAAM,SAAS,GAA6B,CAAC,EAC3C,EAAE,GAAG,EAAE,EACP,QAAQ,EACR,WAAW,GAAG,KAAK,EACnB,MAAM,EAAE,gBAAgB,EACxB,QAAQ,GAAG,SAAS,EACpB,KAAK,GAAG,EAAE,EAEI,EAAE,EAAE;IAElB,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,QAAQ,CAAU,WAAW,CAAC,CAAC;IAC3E,MAAM,qBAAqB,GAAG,gBAAgB,KAAK,SAAS,CAAC;IAC7D,MAAM,MAAM,GAAG,qBAAqB,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,cAAc,CAAC;IAEzE,MAAM,UAAU,GAAG,GAAG,EAAE;QACtB,MAAM,SAAS,GAAG,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC3B,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAC/B,CAAC;QACD,IAAI,QAAQ,EAAE,CAAC;YACb,QAAQ,CAAC,SAAS,CAAC,CAAC;QACtB,CAAC;IACH,CAAC,CAAC;IAEF,OAAM,CACJ,CAAC,GAAG,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAChC;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,mBAAmB,CAChC;QAAA,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAC/B;UAAA,CAAC,KAAK,CACR;QAAA,EAAE,IAAI,CACN;QAAA,CAAC,KAAK,CACJ,IAAI,CAAC,OAAO,CACZ,MAAM,CAAC,CAAC,EAAE,CAAC,CACX,KAAK,CAAC,CAAC,EAAE,CAAC,CACV,OAAO,CAAC,UAAU,CAClB,IAAI,CAAC,CAAE,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CACxC,OAAO,CAAC,CAAC,UAAU,CAAC,EAExB;MAAA,EAAE,GAAG,CAEL;;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,kBAAkB,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CACtE;QAAA,CAAC,QAAQ,CACX;MAAA,EAAE,GAAG,CACP;IAAA,EAAE,GAAG,CAAC,CACP,CAAA;AACH,CAAC,CAAA;AAED,eAAe,SAAS,CAAC","sourcesContent":["import React, { useMemo, useState } from 'react'\r\nimport Badge from './../Button/Badge';\r\nimport '../design/style.css';\r\nimport './Accordion.css';\r\n\r\nexport interface AccordionProps {\r\n  id?: string;\r\n  /**\r\n   * Children are visible when the accordion is open\r\n  */\r\n  children: React.ReactNode\r\n  isOpen?: boolean;\r\n  onToggle?:  (isOpen: boolean) => void;\r\n  title: string;\r\n}\r\n\r\nconst Accordion: React.FC<AccordionProps> = ({\r\n  id = '',\r\n  children,\r\n  defaultOpen = false,\r\n  isOpen: isOpenedByParent,\r\n  onToggle = undefined,\r\n  title = \"\"\r\n\r\n}:AccordionProps) => {\r\n\r\n  const [isOpenedBySelf, setisOpenedBySelf] = useState<boolean>(defaultOpen);\r\n  const isControlledComponent = isOpenedByParent !== undefined;\r\n  const isOpen = isControlledComponent ? isOpenedByParent : isOpenedBySelf;\r\n\r\n  const toggleOpen = () => {\r\n    const newIsOpen = !isOpen;\r\n    if (!isControlledComponent) {\r\n      setisOpenedBySelf(newIsOpen);\r\n    }\r\n    if (onToggle) {\r\n      onToggle(newIsOpen);\r\n    }\r\n  };\r\n\r\n  return(\r\n    <div className='accordion' id={id}>\r\n      <div className=\"accordion_heading\">\r\n        <span className=\"accordion_title\">\r\n          {title}\r\n        </span>\r\n        <Badge\r\n          look=\"muted\"\r\n          height={16}\r\n          width={16}\r\n          viewbox=\"0 0 16 9\"\r\n          icon={ isOpen ? 'arrowUp' : 'arrowDown'}\r\n          onClick={toggleOpen}\r\n        />\r\n      </div>\r\n\r\n      <div className={`accordion_body ${isOpen === true ? \"Open\" : \"Closed\"}`}>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Accordion;"]}