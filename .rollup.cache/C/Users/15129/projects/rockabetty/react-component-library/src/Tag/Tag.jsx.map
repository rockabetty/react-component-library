{"version":3,"file":"Tag.jsx","sourceRoot":"","sources":["Tag.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,UAAU,MAAM,YAAY,CAAC;AACpC,OAAO,qBAAqB,CAAC;AAC7B,OAAO,WAAW,CAAC;AACnB,OAAO,EAAE,KAAK,EAAE,MAAM,WAAW,CAAC;AAClC,OAAO,EAAoB,mBAAmB,EAAE,MAAM,sBAAsB,CAAA;AAuC3E,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAa,gCAChC,mBAAmB,KACtB,KAAK,EAAE,EAAE,EACT,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,GAAG,EAAE,GAAE,CAAC,EACjB,SAAS,EAAE,KAAK,EAChB,IAAI,EAAE,EAAE,EACR,IAAI,EAAE,SAAS,GACJ,CAAA;AAEb,MAAM,GAAG,GAAsB,CAAC,KAAK,EAAE,EAAE;IACvC,MAAM,EACJ,EAAE,EACF,SAAS,EACT,KAAK,EACL,OAAO,EACR,GAAG,KAAK,CAAC;IAER,OAAO,CACL,CAAC,GAAG,CACF,EAAE,CAAC,CAAC,EAAE,CAAC,CACP,SAAS,CAAC,CAAC,OAAO,UAAU,CAAC;YAC3B,SAAS,EAAE,CAAC,CAAC,SAAS;SACvB,CAAC,EAAE,CAAC,CAEL;QAAA,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,IAAI,CACnB;QAAA,CAAC,SAAS;YACR,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CACxE;YACH,CAAC,CAAC,IACJ,CACF;MAAA,EAAE,GAAG,CAAC,CACP,CAAA;AACL,CAAC,CAAA;AAED,eAAe,GAAG,CAAC","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../design/style.css';\r\nimport './Tag.css';\r\nimport { Badge } from '../Button';\r\nimport { InteractiveProps, InteractiveDefaults } from '../types/interactive'\r\n\r\n\r\nexport interface TagProps extends InteractiveProps {\r\n  /**\r\n   * The name for the tag\r\n  */\r\n  label: string;\r\n  /**\r\n   * Specify the size of the tag\r\n  */\r\n  size?: 'sm' | 'md' | 'lg';\r\n  /**\r\n   * Click handler for when you click the close button\r\n  */\r\n  onClose?: (...params: any) => any;\r\n  /**\r\n   * If removable, then a close-button is displayed.\r\n   */\r\n  removable?: boolean;\r\n  /**\r\n   * The name of an icon to render inline with the tag. See Icon choices.\r\n   */\r\n  icon?: string;\r\n  /**\r\n   * Determine the appearnce of the tag. Neutral takes on secondary theme, outline takes on text color.\r\n   */\r\n  look?: 'red'\r\n    | 'orange'\r\n    | 'yellow'\r\n    | 'green'\r\n    | 'blue'\r\n    | 'indigo'\r\n    | 'violet'\r\n    | 'grey'\r\n    | 'black'\r\n    | 'white'\r\n    | 'neutral'\r\n    | 'match text';\r\n};\r\n\r\nexport const TagDefaults: TagProps = {\r\n  ...InteractiveDefaults,\r\n  label: '',\r\n  size: 'md',\r\n  onClose: () => {},\r\n  removable: false,\r\n  icon: '',\r\n  look: 'neutral',\r\n} as TagProps\r\n\r\nconst Tag:React.FC<TagProps> = (props) => {\r\n  const {\r\n    id,\r\n    removable,\r\n    label,\r\n    classes\r\n  } = props;\r\n\r\n    return (\r\n      <div\r\n        id={id}\r\n        className={`tag ${classNames({\r\n          Removable: !!removable\r\n        })}`}\r\n      >\r\n        <span>{label}</span>\r\n        {removable\r\n          ? (<Badge label=\"remove\" look=\"muted\" icon=\"close\" width={10} height={10}/>\r\n            )\r\n          : null\r\n        }\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Tag;"]}