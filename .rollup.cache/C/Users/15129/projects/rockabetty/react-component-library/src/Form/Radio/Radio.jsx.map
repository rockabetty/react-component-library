{"version":3,"file":"Radio.jsx","sourceRoot":"","sources":["Radio.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,UAAU,MAAM,YAAY,CAAA;AACnC,OAAO,wBAAwB,CAAA;AAC/B,OAAO,SAAS,MAAM,oBAAoB,CAAA;AAC1C,OAAO,aAAa,CAAA;AAsCpB,MAAM,KAAK,GAAG,CAAC,EACb,EAAE,EACF,SAAS,GAAG,OAAO,EACnB,OAAO,GAAG,KAAK,EACf,QAAQ,GAAG,KAAK,EAChB,MAAM,GAAG,EAAE,EACX,IAAI,GAAG,EAAE,EACT,KAAK,GAAG,EAAE,EACV,QAAQ,GAAG,CAAC,EACZ,QAAQ,GACG,EAAE,EAAE;IAEf,OAAM,CACJ,CAAC,SAAS,CACR,OAAO,CAAC,CAAC,UAAU,CAAC;YAClB,SAAS,EAAE,IAAI;YACf,UAAU,EAAE,QAAQ;YACpB,OAAO,EAAE,MAAM,KAAK,OAAO;SAC5B,CAAC,CAAC,CAEH;MAAA,CAAC,KAAK,CACJ,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,SAAS,CAAC,CAAC,iBAAiB,UAAU,CAAC;YACrC,OAAO,EAAG,MAAM,KAAK,OAAO;YAC5B,OAAO,EAAG,MAAM,KAAK,OAAO;SAC7B,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CACZ,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,EAAE,CAAC,CAAC,EAAE,CAAC,CACP,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,IAAI,CAAC,OAAO,CACZ,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,KAAK,CAAC,CAAC,KAAK,CAAC,EAEf;MAAA,CAAC,KAAK,CACJ,SAAS,CAAC,aAAa,CACvB,OAAO,CAAC,CAAC,EAAE,CAAC,CAEZ;QAAA,CAAC,SAAS,CACZ;MAAA,EAAE,KAAK,CACT;IAAA,EAAE,SAAS,CAAC,CACb,CAAA;AACH,CAAC,CAAA;AAED,eAAe,KAAK,CAAA","sourcesContent":["import React from 'react'\r\nimport classNames from 'classnames'\r\nimport '../../design/style.css'\r\nimport FormField from '../atoms/FormField'\r\nimport './Radio.css'\r\n\r\nexport interface RadioProps {\r\n  /**\r\n   * Specify the unique ID of the input\r\n  */\r\n  id?: string\r\n  labelText: string\r\n  /**\r\n   * If something should be rendered checked by default, indicate so here.\r\n   */\r\n  checked?: boolean\r\n  /** \r\n   * A disabled checkbox renders, but is not interactable.\r\n  */\r\n  disabled?: boolean\r\n  /**\r\n   * Set a radio button as valid, error, or none (default)\r\n  */\r\n  status?: 'valid' | 'error' | ''\r\n  /**\r\n   * Give the radio a name for a radio group\r\n   */\r\n  name: string\r\n  /**\r\n   * Give the radio input a value\r\n  */\r\n  value: string | number\r\n  /**\r\n   * Provide an onChange handler\r\n  */\r\n  onChange: (...params: any) => any\r\n  /**\r\n   * Give a specific error message for form validation.\r\n   */\r\n  tabIndex?: number\r\n}\r\n\r\nconst Radio = ({\r\n  id,\r\n  labelText = 'Label',\r\n  checked = false,\r\n  disabled = false,\r\n  status = '',\r\n  name = '',\r\n  value = '',\r\n  tabIndex = 0,\r\n  onChange,\r\n}: RadioProps) => {\r\n  \r\n  return(\r\n    <FormField\r\n      classes={classNames({\r\n        'Compact': true,\r\n        'Disabled': disabled,\r\n        'Error': status === 'error'\r\n      })}\r\n    >\r\n      <input\r\n        checked={checked}\r\n        className={`radio_control ${classNames({\r\n          'Valid' : status === 'valid',\r\n          'Error' : status === 'error'\r\n        })}`.trim()}\r\n        disabled={disabled}\r\n        id={id}\r\n        name={name}\r\n        onChange={onChange}\r\n        type='radio'\r\n        tabIndex={tabIndex}\r\n        value={value}\r\n      />\r\n      <label\r\n        className=\"radio_label\"\r\n        htmlFor={id}\r\n      >\r\n        {labelText}\r\n      </label>\r\n    </FormField>\r\n  )\r\n}\r\n\r\nexport default Radio"]}