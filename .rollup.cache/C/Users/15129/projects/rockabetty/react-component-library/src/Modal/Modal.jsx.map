{"version":3,"file":"Modal.jsx","sourceRoot":"","sources":["Modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\r\nimport classNames from 'classnames'\r\nimport '../design/style.css'\r\nimport './Modal.css'\r\nimport Icon from '../Icon'\r\nimport { Button, ButtonSet } from '../Button'\r\n\r\nexport interface ModalProps {\r\n  /**\r\n   * Label for whatever the action the modal is associated with, eg 'save'.\r\n  */\r\n  actionButtonLabel?: string\r\n  /**\r\n   * Required property for accessibility. This will be read by screen readers.\r\n  */\r\n  ariaLabel: string\r\n  /**\r\n   * Children for the modal\r\n  */\r\n  children: React.ReactNode\r\n  /**\r\n   * Pass in a custom CSS class\r\n  */\r\n  classes?: string\r\n  /**\r\n   * Accessibility-minded label for the close button. Default is \"close\".\r\n  */\r\n  closeButtonLabel?: string\r\n  /**\r\n  * Set the content of the modal's header (title).\r\n  */\r\n  heading?: string\r\n  /**\r\n   * For screen readers, which will read the modal differently if this is an alert.\r\n  */\r\n  isAlert?: boolean\r\n  /**\r\n   * DOM element ID of the top level node\r\n  */\r\n  id: string\r\n  /**\r\n   * Whether the modal is open.\r\n  */ \r\n  isOpen: boolean\r\n  /**\r\n   * Designate that moving forward will delete data.\r\n  */\r\n  isWarning?: boolean\r\n  /**\r\n   * Handler for keypresses (down)\r\n  */\r\n  onKeyDown?: (...params: any) => any\r\n  /**\r\n   * Handler for closing a modal.  The handler passed in should change the `isOpen` property.\r\n  */\r\n  onClose: (...params: any) => any\r\n  /**\r\n   * Handler for confirming an interactive modal's intended action (such as submitting a form). The handler passed in should change the `isOpen` property.\r\n  */\r\n  onAction?: (...params: any) => any\r\n  /**\r\n  * If true, clicking outside the modal will not close the modal.\r\n  */\r\n  persistent?: boolean\r\n  /**\r\n   * Control width of modal.\r\n  */\r\n  size?: 'sm' | 'md' | 'lg'\r\n  /**\r\n   * Specify if modal has scrolling content.\r\n  * */\r\n  scrolls?: boolean\r\n  /**\r\n   * custom on click event function\r\n  * */\r\n  onClick?: (...params: any) => any\r\n}\r\n\r\nconst Modal = ({\r\n  actionButtonLabel = '',\r\n  ariaLabel = '',\r\n  children,\r\n  classes = '',\r\n  closeButtonLabel = 'Close',\r\n  heading,\r\n  isAlert,\r\n  id = '',\r\n  isOpen,\r\n  isWarning,\r\n  onAction = () => {},\r\n  onClose = () => {},\r\n  onKeyDown = () => {},\r\n  persistent,\r\n  size,\r\n  scrolls,\r\n}:ModalProps) => {\r\n\r\n  const doButtonBay = function () {\r\n    return actionButtonLabel\r\n  }\r\n\r\n  const trapFocus = function () {\r\n    if (isOpen) {\r\n      const element = document.querySelector(`#${id}`) as HTMLElement\r\n      if (element) {\r\n        element.focus()\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(()=> {\r\n    trapFocus()\r\n  },\r\n  [isOpen])\r\n\r\n  const checkEscape = function (e: React.KeyboardEvent) {\r\n    if (e.code === 'Escape') {\r\n      if (!persistent) {\r\n        onClose()\r\n      }\r\n    }\r\n  }\r\n\r\n  const checkClickOut = function(e: React.MouseEvent) {\r\n    const clickedNode = e.target as HTMLElement\r\n    const classList = clickedNode.classList.value.split(' ')\r\n    if (classList.includes('modal')) { // then we are clicking outside of the content\r\n      if (!persistent) {\r\n        onClose()\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        tabIndex={0}\r\n        onFocus={trapFocus}\r\n      >\r\n      </div>\r\n      <dialog\r\n        aria-hidden={!isOpen}\r\n        aria-label={ariaLabel ? ariaLabel : heading || 'Modal'}\r\n        className={`modal ${classes} ${classNames({\r\n          Open: isOpen,\r\n          Closed: !isOpen,\r\n          Alert: isAlert,\r\n          Warning: isWarning,\r\n          Medium: size === 'md' || !!size,\r\n          Large: size === 'lg',\r\n          Small: size === 'sm'\r\n        })}`\r\n          .trim()}\r\n        id={id}\r\n        onClick={(e) => {checkClickOut(e)}}\r\n        onKeyUp={(e) => {checkEscape(e)}}\r\n        onKeyDown={(e) => {onKeyDown(e)}}\r\n        role={isAlert ? 'alertdialog' : 'dialog' }\r\n        tabIndex={-1}\r\n        open={isOpen}\r\n      >\r\n        <div className={`modal_content ${classNames({\r\n          Scrolling: scrolls,\r\n          Small: size === 'sm',\r\n          Medium: size === 'md',\r\n          Large: size === 'lg',\r\n        })}`.trim()}>\r\n          <div className=\"modal_header\">\r\n            <span className=\"modal_title\">{heading}</span>\r\n            <button\r\n              type=\"button\"\r\n              className=\"modal_close\"\r\n              onClick={() => {onClose()}}\r\n              aria-label={closeButtonLabel}\r\n            >\r\n              <Icon id={`${id}-close-icon`} width={24} height={24} viewbox={'0 0 16 16'} name=\"close\" />\r\n            </button>\r\n          </div>\r\n          <div className=\"modal_body\">\r\n            {children}\r\n          </div>\r\n          {\r\n            doButtonBay() ?\r\n              (\r\n                <div className=\"modal_footer\">\r\n                  <ButtonSet>\r\n                    <Button\r\n                      id={`${id}-close`}\r\n                      type=\"button\"\r\n                      onClick={() => {onClose()}}\r\n                      look=\"muted\"\r\n                    >\r\n                      {closeButtonLabel}\r\n                    </Button>\r\n                    <Button\r\n                      id={`${id}-action`}\r\n                      type=\"button\"\r\n                      onClick={() => {onAction()}}\r\n                      look=\"primary\"\r\n                    >\r\n                      {actionButtonLabel}\r\n                    </Button>\r\n                  </ButtonSet>\r\n                </div>\r\n              )\r\n              :\r\n              null\r\n          }\r\n        </div>\r\n      </dialog>\r\n      <div\r\n        tabIndex={0}\r\n        onFocus={trapFocus}\r\n      >\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Modal"]}