{"version":3,"file":"TabGroup.jsx","sourceRoot":"","sources":["TabGroup.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEjD,OAAO,GAAG,MAAM,OAAO,CAAC;AACxB,OAAO,gBAAgB,CAAC;AAmBxB,MAAM,QAAQ,GAA4B,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,aAAa,EAAE,EAAE,EAAE;IACjF,MAAM,mBAAmB,GAAG,aAAa,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACzD,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAS,mBAAmB,CAAC,CAAC;IAE9E,MAAM,SAAS,GAAG,CAAC,GAAW,EAAE,EAAE;QAChC,eAAe,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;IAEvF,OAAO,CACL,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAC/B;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,wBAAwB,CACrC;QAAA,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CACjB,CAAC,GAAG,CACF,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CACX,GAAG,CAAC,CAAC,OAAO,GAAG,CAAC,GAAG,EAAE,CAAC,CACtB,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CACpB,QAAQ,CAAC,CAAC,YAAY,KAAK,GAAG,CAAC,GAAG,CAAC,CACnC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAClC,QAAQ,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,EACvB,CACH,CAAC,CACJ;MAAA,EAAE,GAAG,CAEL;;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,CAAC,EAAE,GAAG,CAC3D;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC","sourcesContent":["import React, { useState, useMemo } from \"react\";\r\nimport { UniversalProps } from \"../types/universal\";\r\nimport Tab from \"./Tab\";\r\nimport \"./TabGroup.css\";\r\nimport classNames from 'classnames';\r\n\r\ninterface TabMeta extends UniversalProps {\r\n  key: string;\r\n  name: string;\r\n  disabled?: boolean;\r\n}\r\n\r\ninterface TabContentMap {\r\n  [key: string]: React.ReactNode;\r\n}\r\n\r\nexport interface TabGroupProps extends UniversalProps {\r\n  tabs: TabMeta[];\r\n  content: TabContentMap;\r\n  initialTabKey?: string;\r\n}\r\n\r\nconst TabGroup: React.FC<TabGroupProps> = ({ id, tabs, content, initialTabKey }) => {\r\n  const initialActiveTabKey = initialTabKey || tabs[0].key;\r\n  const [activeTabKey, setActiveTabKey] = useState<string>(initialActiveTabKey);\r\n\r\n  const updateTab = (key: string) => {\r\n    setActiveTabKey(key);\r\n  };\r\n\r\n  const activeTabContent = useMemo(() => content[activeTabKey], [content, activeTabKey]);\r\n\r\n  return (\r\n    <div className=\"tabgroup\" id={id}>\r\n      <div className=\"tabgroup_tab-selection\">\r\n        {tabs.map((tab) => (\r\n          <Tab\r\n            id={tab.id}\r\n            key={`tab-${tab.key}`}\r\n            labelText={tab.name}\r\n            isActive={activeTabKey === tab.key}\r\n            onClick={() => updateTab(tab.key)}\r\n            disabled={tab.disabled}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"tabgroup_content\">{activeTabContent}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabGroup;"]}