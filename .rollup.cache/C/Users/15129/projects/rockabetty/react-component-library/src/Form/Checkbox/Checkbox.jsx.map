{"version":3,"file":"Checkbox.jsx","sourceRoot":"","sources":["Checkbox.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,UAAU,MAAM,YAAY,CAAC;AACpC,OAAO,wBAAwB,CAAC;AAChC,OAAO,SAAS,MAAM,oBAAoB,CAAC;AAC3C,OAAO,gBAAgB,CAAC;AAkDxB,MAAM,QAAQ,GAAG,CAAC,EAChB,EAAE,EACF,OAAO,GAAG,EAAE,EACZ,OAAO,GAAG,KAAK,EACf,QAAQ,GAAG,KAAK,EAChB,SAAS,GAAG,2BAA2B,EACvC,UAAU,EACV,SAAS,GAAG,OAAO,EACnB,IAAI,GAAG,EAAE,EACT,QAAQ,GAAG,GAAG,EAAE,GAAE,CAAC,EACnB,QAAQ,GAAG,CAAC,EACZ,KAAK,GAAG,EAAE,EACV,MAAM,EACQ,EAAE,EAAE;IAElB,OAAM,CACJ,CAAC,SAAS,CACR,OAAO,CAAC,CAAC,UAAU,CAAC;YAClB,SAAS,EAAE,IAAI;YACf,UAAU,EAAE,QAAQ;YACpB,OAAO,EAAE,MAAM,KAAK,OAAO;SAC5B,CAAC,CAAC,CAEH;MAAA,CAAC,KAAK,CACJ,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,SAAS,CAAC,CAAC,oBAAoB,OAAO,IAAI,UAAU,CAAC;YACnD,OAAO,EAAG,MAAM,KAAK,OAAO;YAC5B,OAAO,EAAG,MAAM,KAAK,OAAO;SAC7B,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CACZ,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,EAAE,CAAC,CAAC,EAAE,CAAC,CACP,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,IAAI,CAAC,UAAU,CACf,KAAK,CAAC,CAAC,KAAK,CAAC,EAEf;MAAA,CAAC,KAAK,CACJ,SAAS,CAAC,gBAAgB,CAC1B,OAAO,CAAC,CAAC,EAAE,CAAC,CAEZ;QAAA,CAAC,SAAS,CACZ;MAAA,EAAE,KAAK,CACP;MAAA,CAAE,UAAU,IAAI,MAAM,KAAK,OAAO,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAChC;UAAA,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAW,CAC/C;QAAA,EAAE,CAAC,CAAC;YACJ,CAAC;gBACD,EACF,CACF;IAAA,EAAE,SAAS,CAAC,CACb,CAAA;AACH,CAAC,CAAA;AAED,eAAe,QAAQ,CAAA","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../../design/style.css';\r\nimport FormField from '../atoms/FormField';\r\nimport './Checkbox.css';\r\n\r\nexport interface CheckboxProps {\r\n  /**\r\n   * Specify the unique ID of the input\r\n  */\r\n  id?: string\r\n  labelText: string\r\n  /** \r\n   * Optional additional styling\r\n  */\r\n  classes?: string\r\n  /**\r\n   * If something should be rendered checked by default, indicate so here.\r\n   */\r\n  checked?: boolean\r\n  /** \r\n   * A disabled checkbox renders, but is not interactable.\r\n  */\r\n  disabled?: boolean\r\n  /**\r\n   * Give a specific error message for form validation.\r\n   */\r\n  errorText?: string\r\n  /**\r\n   * Give the user additional instructions for assistance\r\n  */\r\n  helperText?: string\r\n  /**\r\n   * HTML name attribute to pass down\r\n   */\r\n  name?: string\r\n  /**\r\n   * Provide an onChange handler\r\n  */\r\n  onChange: (...params: any) => any\r\n  /**\r\n   * Determine which status to render the checkbox in.\r\n  */\r\n  status?: 'default' | 'valid' | 'error'\r\n  /**\r\n   * Provide a tab index\r\n  */\r\n  tabIndex?: number\r\n  /*\r\n  * HTML value attribute to pass down\r\n  */\r\n  value?: string | number | readonly string[] | undefined\r\n}\r\n\r\nconst Checkbox = ({\r\n  id,\r\n  classes = '',\r\n  checked = false,\r\n  disabled = false,\r\n  errorText = 'Please review your input.',\r\n  helperText,\r\n  labelText = 'Label',\r\n  name = '',\r\n  onChange = () => {},\r\n  tabIndex = 0,\r\n  value = '',\r\n  status\r\n}: CheckboxProps) => {\r\n  \r\n  return(\r\n    <FormField\r\n      classes={classNames({\r\n        'Compact': true,\r\n        'Disabled': disabled,\r\n        'Error': status === 'error'\r\n      })}\r\n    >\r\n      <input\r\n        checked={checked}\r\n        className={`checkbox_control ${classes} ${classNames({\r\n          'Valid' : status === 'valid',\r\n          'Error' : status === 'error'\r\n        })}`.trim()}\r\n        disabled={disabled}\r\n        id={id}\r\n        name={name}\r\n        onChange={onChange}\r\n        tabIndex={tabIndex}\r\n        type='checkbox'\r\n        value={value}\r\n      />\r\n      <label\r\n        className=\"checkbox_label\"\r\n        htmlFor={id}\r\n      >\r\n        {labelText}\r\n      </label>\r\n      { helperText || status === 'error' ?\r\n        <p className=\"checkbox_helpertext\">\r\n          {status === 'error' ? errorText : helperText }\r\n        </p>\r\n        :\r\n        ''\r\n      }\r\n    </FormField>\r\n  )\r\n}\r\n\r\nexport default Checkbox"]}