{"version":3,"file":"useValidation.js","sourceRoot":"","sources":["useValidation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAa9C,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,OAA0B,EAAE,EAAE;IAE1D,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC;IAE7E,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAC;IACnD,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAS,EAAE,CAAC,CAAC;IAE/C,gDAAgD;IAChD,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE;QAChC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAChB,IAAI,QAAQ,IAAI,CAAC,KAAK,EAAE,CAAC;YACvB,OAAO,wBAAwB,CAAC;QAClC,CAAC;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,IAAI,SAAS,IAAI,KAAK,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC;gBAC1C,OAAO,oBAAoB,SAAS,mBAAmB,CAAC;YAC1D,CAAC;YAED,IAAI,SAAS,IAAI,KAAK,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC;gBAC1C,OAAO,6BAA6B,SAAS,mBAAmB,CAAC;YACnE,CAAC;YAED,IAAI,OAAO,EAAE,CAAC;gBACZ,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;gBACzC,MAAM,mBAAmB,GAAG,IAAI,GAAG,EAAE,CAAC;gBACtC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;oBACzB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;wBAC7B,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;oBACvD,CAAC;gBACH,CAAC;gBACD,MAAM,sBAAsB,GAAG,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBAE/D,IAAI,sBAAsB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACtC,OAAO,iBAAiB,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBAC/D,CAAC;YACH,CAAC;QACH,CAAC;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,IAAI,GAAG,IAAI,KAAK,GAAG,GAAG,EAAE,CAAC;gBACvB,OAAO,qCAAqC,GAAG,GAAG,CAAC;YACrD,CAAC;YACD,IAAI,GAAG,IAAI,KAAK,GAAG,GAAG,EAAE,CAAC;gBACvB,OAAO,mCAAmC,GAAG,GAAG,CAAC;YACnD,CAAC;QACH,CAAC;QAED,OAAO,EAAE,CAAC;QACV,QAAQ,CAAC,IAAI,CAAC,CAAC;IACjB,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IAE/D,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;AACxD,CAAC,CAAC","sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\ntype ValidationOptions = {\r\n  value?: string | number;\r\n  required?: boolean;\r\n  pattern?: string;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  min?: number;\r\n  max?: number;\r\n};\r\n\r\n\r\nexport const useValidation = (options: ValidationOptions) => {\r\n\r\n  const { value, required, pattern, minLength, maxLength, min, max } = options;\r\n\r\n  const [valid, setValid] = useState<boolean>(false);\r\n  const [error, setError] = useState<string>(\"\");\r\n \r\n  // This function calls itself in an onBlur event\r\n  const validate = useCallback(() => {\r\n    setValid(false);\r\n    if (required && !value) {\r\n      return \"This field is required\";\r\n    }\r\n\r\n    if (typeof value === \"string\") {\r\n      if (maxLength && value.length > maxLength) {\r\n        return `This can only be ${maxLength} characters long.`;\r\n      }\r\n\r\n      if (minLength && value.length < minLength) {\r\n        return `This needs to be at least ${minLength} characters long.`;\r\n      }\r\n\r\n      if (pattern) {\r\n        const regexPattern = new RegExp(pattern);\r\n        const invalidCharacterSet = new Set();\r\n        for (const char of value) {\r\n          if (!regexPattern.test(char)) {\r\n            invalidCharacterSet.add(char.replace(\" \", \"spaces\"));\r\n          }\r\n        }\r\n        const invalidCharactersArray = Array.from(invalidCharacterSet);\r\n\r\n        if (invalidCharactersArray.length > 0) {\r\n          return `Please remove ${invalidCharactersArray.join(\", \")}.`;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (typeof value === \"number\") {\r\n      if (min && value < min) {\r\n        return `This is too small. The minimum is ${min}.`;\r\n      }\r\n      if (max && value > max) {\r\n        return `This is too big. The maximum is ${max}.`;\r\n      }\r\n    }\r\n\r\n    return \"\";\r\n    setValid(true);\r\n  }, [value, required, pattern, minLength, maxLength, min, max]);\r\n\r\n  return { valid, setValid, error, setError, validate };\r\n};\r\n"]}