{"version":3,"file":"WriteInField.jsx","sourceRoot":"","sources":["WriteInField.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\r\nimport { InputProps, InputDefaults } from '../../types/input'\r\nimport classNames from 'classnames'\r\nimport '../../design/style.css'\r\nimport { default as Label } from './Label';\r\nimport { default as FormField } from './FormField';\r\nimport { useValidation } from '../hooks/useValidation'; \r\n\r\nexport interface WriteInFieldProps extends InputProps {  \r\n  /**\r\n   * Add placeholder text to provide an example input value.\r\n  */\r\n  placeholderText?: string\r\n  /**\r\n   * Specify the input type.\r\n  */ \r\n  type?: 'text' | 'number' | 'email' | 'password' | 'search' | 'tel' | 'datetime-local' | 'date' | 'time' | 'url' | 'week' | 'textarea'\r\n  /**\r\n   * A maximum value when entering dates or numbers\r\n  */\r\n  max?: number;\r\n  /**\r\n   * A minimum value when entering dates or numbers\r\n  */\r\n  min?: number;\r\n  /*\r\n  * A maximum character length\r\n  */\r\n  maxLength?: number;\r\n  /*\r\n  * A minimum character length\r\n  */\r\n  minLength?: number;\r\n  /*\r\n  * Restrict valid input\r\n  */\r\n  pattern?: string;\r\n  /**\r\n   * Give the user information to understand the field\r\n   */\r\n  helperText?: string;\r\n  /**\r\n   * Give the user feedback on why their input is wrong\r\n   */ \r\n  errorText?: string;\r\n}\r\n\r\nconst WriteInField: React.FC<WriteInFieldProps> = (props) => {\r\n  const {\r\n    id = \"\",\r\n    type = \"text\",\r\n    disabled = false,\r\n    max,\r\n    min,\r\n    maxLength,\r\n    minLength,\r\n    name = \"\",\r\n    onBlur = () => {},\r\n    onChange = () => {},\r\n    onClick = () => {},\r\n    pattern,\r\n    labelText = \"\",\r\n    placeholderText = \"\",\r\n    helperText = \"\",\r\n    errorText = \"\",\r\n    classes,\r\n    required,\r\n    value\r\n  } = props\r\n\r\n  const { valid, error, validate } = useValidation({\r\n    value,\r\n    required,\r\n    pattern,\r\n    maxLength,\r\n    minLength,\r\n    min,\r\n    max\r\n  });\r\n\r\n  const textareaRef = useRef<HTMLTextAreaElement | null>(null);\r\n\r\n  const renderHelperOrErrorText = () => {\r\n    if (!helperText && !errorText && !error) return null;\r\n    return (\r\n      <p id={`helpertext_${id || labelText}`} className={classNames({ \"form-field_helpertext\": true, \"Error\": !!errorText })}>\r\n        { errorText || error || helperText }\r\n      </p>\r\n    );\r\n  }\r\n\r\n  const textAreaChangeHandler = function (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n    if (textareaRef.current) {\r\n      textareaRef.current.style.height = 'auto'; // Reset the height\r\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`; // Set the new height\r\n    }\r\n    onChange(e);\r\n  }\r\n\r\n  const inputChangeHandler = function (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n    onChange(e);\r\n  }\r\n\r\n  const handleChange = type === 'textarea' ? textAreaChangeHandler : inputChangeHandler;\r\n\r\n  const inputProps = {\r\n    className: `form-field_control ${classes}`.trim(),\r\n    value,\r\n    disabled,\r\n    id,\r\n    max,\r\n    maxLength,\r\n    name,\r\n    min, \r\n    onBlur: (e: React.FocusEvent) => {\r\n      validate();\r\n      onBlur && onBlur(e);\r\n    },\r\n    onChange: handleChange,\r\n    onClick,\r\n    pattern,\r\n    placeholder: placeholderText,\r\n    required,\r\n    type\r\n  };\r\n\r\n  const renderInputField = () => {\r\n    if (type === 'textarea') {\r\n      return <textarea ref={textareaRef} {...inputProps} />;\r\n    } else {\r\n      return <input {...inputProps} aria-describedby={`helpertext_${id || labelText}`} />\r\n    }\r\n  }\r\n\r\n  return(\r\n    <FormField\r\n      classes={classNames({\r\n        'Disabled': disabled,\r\n        'Error': error || errorText,\r\n        'Valid': !errorText && valid\r\n      })}\r\n    >\r\n      <Label\r\n        htmlFor={id || `label-${labelText}`}\r\n        labelText={labelText || \"MISSING LABEL\"}\r\n        required={required}\r\n      />\r\n      {renderInputField()}\r\n      {renderHelperOrErrorText()}\r\n    </FormField>\r\n  )\r\n}\r\n\r\nexport default WriteInField"]}