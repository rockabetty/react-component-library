{"version":3,"file":"input.js","sourceRoot":"","sources":["input.ts"],"names":[],"mappings":"AACA,OAAO,EAAoB,mBAAmB,EAAE,MAAM,eAAe,CAAA;AA6CrE,MAAM,CAAC,MAAM,aAAa,GAAG,gCACxB,mBAAmB,KACtB,SAAS,EAAE,EAAE,EACb,SAAS,EAAE,EAAE,EACb,cAAc,EAAE,EAAE,EAClB,QAAQ,EAAE,KAAK,EACf,OAAO,EAAE,KAAK,EACd,IAAI,EAAE,EAAE;IACR,gEAAgE;IAChE,QAAQ,EAAE,GAAG,EAAE,GAAE,CAAC,EAClB,KAAK,EAAE,IAAI,EACX,QAAQ,EAAE,KAAK,EACf,KAAK,EAAE,SAAS,GACH,CAAA","sourcesContent":["import { RefObject } from 'react';\r\nimport { InteractiveProps, InteractiveDefaults } from './interactive'\r\n\r\nexport interface InputProps extends InteractiveProps {\r\n    /**\r\n     * Define a string that designates what an interactive item is for\r\n    */\r\n    labelText?: string \r\n    /**\r\n     * Define a string value that labels an interactive element.\r\n     * Not necessary if there is already an actual label element.\r\n    */\r\n    ariaLabel?: string;\r\n    /**\r\n    * The ID of the element (or elements) that label the element it is applied to.\r\n    * Not necessary if there is already an actual lable in the element.\r\n    */\r\n    ariaLabelledby?: string;\r\n    /**\r\n     * Determine if this element should be rendered with 'error' class \r\n    */\r\n    hasError?: boolean;\r\n    /**\r\n     *  A name for HTML semantics, to get form data, etc.\r\n    */\r\n    name?: string;\r\n    /**\r\n     * Designates whether an input is valid\r\n     */\r\n    isValid?: boolean;\r\n    /**\r\n    * Determine behavior when the user changes the value of the element\r\n    */\r\n    onChange: (...params: any) => any;\r\n    /**\r\n    * If you want to track the value of an interactive element by ref\r\n    * This is a matter of technical execution details in context\r\n    */\r\n    refer?: RefObject<HTMLInputElement> | null;\r\n    /**\r\n    * Designate if an input element is required for form to be valid\r\n    */\r\n    required?: boolean;\r\n    value?: \"checked\" | string | number;\r\n}\r\n\r\nexport const InputDefaults = {\r\n  ...InteractiveDefaults,\r\n  labelText: \"\",\r\n  ariaLabel: \"\",\r\n  ariaLabelledby: \"\",\r\n  hasError: false,\r\n  isValid: false,\r\n  name: \"\",\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onChange: () => {},\r\n  refer: null,\r\n  required: false,\r\n  value: undefined,\r\n} as InputProps"]}